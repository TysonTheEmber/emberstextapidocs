{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Aperture%20API/","title":"\ud83d\udcf7 Aperture API","text":"<p>Aperture API is a cinematic camera toolkit for Forge 1.20.1 that ships with an in\u2011game editor, Bezier handles/gizmos, and a command surface to script shots. Use it to create smooth, repeatable camera motions for trailers, machinima, or cutscenes.</p> <p>Highlights</p> <ul> <li>In\u2011game keyframe editor with draggable Bezier handles</li> <li>Multiple interpolation modes (Bezier, Catmull\u2011Rom, Cosine, Linear, Step)</li> <li>Utilities for constant\u2011speed playback and clean easing</li> <li>Minimal commands to play, stop, list, and export paths</li> <li>Clean, integration\u2011ready API surface</li> </ul>"},{"location":"Aperture%20API/#what-you-can-build","title":"What you can build","text":"<ul> <li>Scripted cutscenes that play in sync with quests or boss phases</li> <li>Cinematic fly\u2011throughs of bases or adventure maps</li> <li>Showcases for mod features or servers</li> <li>Reusable path JSON you can version and ship with datapacks</li> </ul> <p>If you\u2019re new, jump to Quickstart. If you\u2019re integrating from another mod, see Integrating the API.</p>"},{"location":"Aperture%20API/getting-started/","title":"\ud83d\ude80 Install &amp; Build","text":""},{"location":"Aperture%20API/getting-started/#requirements","title":"Requirements","text":"<ul> <li>Java 17+</li> <li>Forge 1.20.1</li> <li>Gradle Wrapper included</li> </ul>"},{"location":"Aperture%20API/getting-started/#clone-build","title":"Clone &amp; Build","text":"<pre><code>git clone https://github.com/TysonTheEmber/Aperture-API.git\ncd Aperture-API\n./gradlew assemble\n</code></pre>"},{"location":"Aperture%20API/getting-started/#dev-client","title":"Dev Client","text":"<pre><code>./gradlew runClient\n</code></pre>"},{"location":"Aperture%20API/getting-started/#lint-format","title":"Lint &amp; Format","text":"<pre><code>./gradlew spotlessApply check\n</code></pre>"},{"location":"Aperture%20API/getting-started/#local-maven-optional","title":"Local Maven (optional)","text":"<p>If you want to consume the API from another project via Maven Local: <pre><code>./gradlew publishToMavenLocal\n</code></pre> Then depend on it from your other mod (coordinates depend on your published group/artifact/version).</p> <p>Tip: Alternatively, add this repo as a composite build in your main mod and use <code>includeBuild(\"../Aperture-API\")</code>.</p>"},{"location":"Aperture%20API/quickstart/","title":"\u26a1 Quickstart","text":"<p>This minimal flow shows how to construct a path, add keyframes, and play it for a player. The types shown are representative of the public API surface.</p> <pre><code>// Pseudo-API example showing common usage patterns.\nimport net.tysontheember.apertureapi.api.ApertureAPI;\nimport net.tysontheember.apertureapi.api.PathBuilder;\nimport net.tysontheember.apertureapi.api.PathType;\n\npublic class DemoCamera {\n    public static void play(ServerPlayer player) {\n        // 1) Build a BEZIER path with 3 keyframes\n        PathBuilder path = ApertureAPI.path(PathType.BEZIER)\n            .add(0,  player.position(),  player.getYRot(), player.getXRot())\n            .add(40, player.position().add(10, 5, 0),   player.getYRot()+30, player.getXRot()-5)\n            .add(80, player.position().add(0, 10, 10),  player.getYRot()+80, player.getXRot());\n\n        // 2) Optional: Enable constant-speed reparameterization\n        path.constantSpeed(true);\n\n        // 3) Play the path at 1.0x speed for the player\n        ApertureAPI.play(player, path.build(), 1.0f, /*loop=*/false, /*autoReset=*/true);\n    }\n}\n</code></pre>"},{"location":"Aperture%20API/quickstart/#exporting-to-json","title":"Exporting to JSON","text":"<pre><code>String json = ApertureAPI.exportJson(path.build());\nFiles.writeString(Path.of(\"my_path.json\"), json);\n</code></pre>"},{"location":"Aperture%20API/quickstart/#playing-back-a-json-path-server-command","title":"Playing back a JSON path (server command)","text":"<pre><code>/camera play my_path 1.0 false true @p\n</code></pre>"},{"location":"Aperture%20API/contrib/changelog/","title":"\ud83d\uddd2\ufe0f Changelog","text":"<p>This file summarizes notable changes. For full commit history, see GitHub.</p>"},{"location":"Aperture%20API/contrib/changelog/#2025-09-26","title":"2025-09-26","text":"<ul> <li>Initial MkDocs documentation scaffold</li> <li>Added user, developer, recipes, and reference sections</li> </ul>"},{"location":"Aperture%20API/contrib/code-style/","title":"\ud83e\udded Style &amp; Conventions","text":"<ul> <li>Java 17 language level</li> <li>Spotless + Google Java Format (<code>./gradlew spotlessApply</code>)</li> <li>Checkstyle + ErrorProne for static checks</li> <li>Package\u2011private for internals; keep api/ slim and stable</li> <li>Document public types with Javadoc</li> </ul>"},{"location":"Aperture%20API/contrib/contributing/","title":"\ud83e\udd1d Contributing","text":""},{"location":"Aperture%20API/contrib/contributing/#dev-setup","title":"Dev Setup","text":"<ol> <li>Clone the repo and run <code>./gradlew runClient</code> to verify it boots.</li> <li>Use <code>./gradlew spotlessApply check</code> before commits.</li> <li>Write tests for math helpers (path, reparameterization) where practical.</li> </ol>"},{"location":"Aperture%20API/contrib/contributing/#pull-requests","title":"Pull Requests","text":"<ul> <li>Keep changes focused</li> <li>Include before/after clips or screenshots when touching editor UX</li> <li>Update docs where behavior changes</li> </ul>"},{"location":"Aperture%20API/contrib/contributing/#license","title":"License","text":"<p>GPL\u20113.0 \u00a9 2025 TysonTheEmber</p>"},{"location":"Aperture%20API/dev/commands-api/","title":"\ud83e\uddf0 Command Hooks (Brigadier)","text":"<p>Aperture integrates cleanly with Brigadier. Here\u2019s how to register a simple wrapper command in your mod that triggers a path:</p> <pre><code>dispatcher.register(Commands.literal(\"demo_shot\")\n    .requires(src -&gt; src.hasPermission(2))\n    .executes(ctx -&gt; {\n        var player = ctx.getSource().getPlayerOrException();\n        var path = ApertureAPI.path(PathType.BEZIER)\n            .add(0, player.position(), player.getYRot(), player.getXRot())\n            .add(60, player.position().add(12, 6, -3), player.getYRot()+40, player.getXRot());\n        ApertureAPI.play(player, path.build(), 1.0f, false, true);\n        return 1;\n    }));\n</code></pre> <p>You can also forward to the stock <code>/camera</code> command from dialogs, quests, or scripts.</p>"},{"location":"Aperture%20API/dev/events-networking/","title":"\ud83d\udce1 Events &amp; Networking","text":"<p>A typical integration needs to react to start/stop and optionally synchronize state to clients.</p>"},{"location":"Aperture%20API/dev/events-networking/#suggested-events","title":"Suggested Events","text":"<ul> <li><code>CameraPlayEvent</code> \u2013 fired when playback begins</li> <li><code>CameraStopEvent</code> \u2013 fired when halted/reset</li> <li><code>CameraTickEvent</code> \u2013 per\u2011tick progress callbacks</li> </ul> <p>Handlers can: - Pause/resume other UI elements - Trigger audio/voice lines - Fade HUD or letterboxing</p> <p>If you send custom packets, prefer lightweight, id\u2011based path references and let clients resolve JSON locally when possible.</p>"},{"location":"Aperture%20API/dev/integration/","title":"\ud83d\udd0c Integrating the API","text":"<p>You can consume Aperture\u2011API from another mod either as a composite build or after publishing to Maven Local.</p>"},{"location":"Aperture%20API/dev/integration/#composite-build-recommended-during-development","title":"Composite Build (recommended during development)","text":"<p>settings.gradle <pre><code>includeBuild(\"../Aperture-API\")\n</code></pre></p> <p>build.gradle <pre><code>dependencies {\n    implementation fg.deobf(\"net.tysontheember:Aperture-API\")\n}\n</code></pre></p> <p>Coordinates may vary depending on <code>group</code>/<code>version</code>. For a released artifact, replace with the published coordinate.</p>"},{"location":"Aperture%20API/dev/integration/#minimal-usage-pattern","title":"Minimal Usage Pattern","text":"<pre><code>import net.tysontheember.apertureapi.api.ApertureAPI;\nimport net.tysontheember.apertureapi.api.PathType;\n\n// Create and play a simple path\nvar builder = ApertureAPI.path(PathType.CATMULL_ROM)\n    .add(0,  pos0, yaw0, pitch0)\n    .add(40, pos1, yaw1, pitch1)\n    .add(80, pos2, yaw2, pitch2)\n    .constantSpeed(true);\n\nApertureAPI.play(player, builder.build(), 1.0f, false, true);\n</code></pre>"},{"location":"Aperture%20API/dev/json-format/","title":"\ud83d\udcc4 JSON Path Format","text":"<p>A simple, versioned JSON format lets you ship paths and edit them outside the game.</p> <pre><code>{\n  \"name\": \"base_flythrough\",\n  \"version\": 1,\n  \"interpolation\": \"BEZIER\",\n  \"loop\": false,\n  \"constantSpeed\": true,\n  \"keyframes\": [\n    {\n      \"tick\": 0,\n      \"pos\": [100.5, 72.0, -45.25],\n      \"yaw\": 0.0,\n      \"pitch\": 10.0,\n      \"roll\": 0.0,\n      \"fov\": 90.0,\n      \"easeIn\": 0.1,\n      \"easeOut\": 0.3,\n      \"handles\": {\n        \"in\":  [0.0, 0.0, 0.0],\n        \"out\": [2.0, 0.5, -1.0]\n      },\n      \"meta\": { \"note\": \"Spawn intro\" }\n    }\n  ],\n  \"meta\": {\n    \"author\": \"TysonTheEmber\",\n    \"createdAt\": \"2025-09-26T00:00:00Z\"\n  }\n}\n</code></pre> <p>Note: Field names and availability may differ depending on your build. Treat this as the canonical shape to target in tools.</p>"},{"location":"Aperture%20API/dev/paths-api/","title":"\ud83e\udde9 Working with Paths (API)","text":"<p>This page outlines common operations available from the API surface. Class names are representative and may differ slightly in your build.</p>"},{"location":"Aperture%20API/dev/paths-api/#builders","title":"Builders","text":"<pre><code>PathBuilder b = ApertureAPI.path(PathType.BEZIER);\nb.add(tick, position, yaw, pitch);\nb.setFov(90f);          // optional per-keyframe\nb.easeIn(0.2f).easeOut(0.4f);\nb.handleIn(vec3).handleOut(vec3);\nvar path = b.build();\n</code></pre>"},{"location":"Aperture%20API/dev/paths-api/#playback","title":"Playback","text":"<pre><code>ApertureAPI.play(player, path, /*speed*/ 1.25f, /*loop*/ false, /*autoReset*/ true);\nApertureAPI.stop(player);\nApertureAPI.reset(player);\n</code></pre>"},{"location":"Aperture%20API/dev/paths-api/#utilities","title":"Utilities","text":"<ul> <li>Reparameterize for constant speed</li> <li>Trim / Split paths by tick range</li> <li>Reverse or Loop helpers</li> <li>Look\u2011At point or entity constraints</li> </ul>"},{"location":"Aperture%20API/recipes/constant-speed/","title":"\ud83c\udfce\ufe0f Constant-Speed Playback","text":"<p>Problem: Segments of unequal length produce uneven camera speed. Solution: Reparameterize by arc\u2011length.</p> <pre><code>var path = ApertureAPI.path(PathType.CATMULL_ROM)\n    .add(0,  p0, yaw0, pitch0)\n    .add(40, p1, yaw1, pitch1)\n    .add(80, p2, yaw2, pitch2)\n    .constantSpeed(true);\n</code></pre> <p>Tips: - Keep keyframe spacing semiregular where possible - Prefer Catmull\u2011Rom for natural sweeps; Bezier for stylized shots</p>"},{"location":"Aperture%20API/recipes/follow-and-lookat/","title":"\ud83c\udfaf Follow Entity &amp; Look-At","text":""},{"location":"Aperture%20API/recipes/follow-and-lookat/#follow-an-entity-position-constraint","title":"Follow an entity (position constraint)","text":"<pre><code>ApertureAPI.follow(path, entity); // binds path to entity transform each tick\n</code></pre>"},{"location":"Aperture%20API/recipes/follow-and-lookat/#lookat-a-pointentity-orientation-constraint","title":"Look\u2011At a point/entity (orientation constraint)","text":"<pre><code>ApertureAPI.lookAt(path, targetPosOrEntity);\n</code></pre> <p>Use soft damping to avoid jitter if the target moves erratically.</p>"},{"location":"Aperture%20API/recipes/smooth-easing/","title":"\ud83c\udfac Smooth Entrances &amp; Exits","text":"<p>Use small ease\u2011in/out values to ramp motion at segment boundaries.</p> <pre><code>b.add(0, p0, yaw0, pitch0).easeOut(0.25f);\nb.add(40, p1, yaw1, pitch1).easeIn(0.25f).easeOut(0.25f);\nb.add(80, p2, yaw2, pitch2).easeIn(0.25f);\n</code></pre> <p>Combine with Bezier handles for film\u2011like arcs.</p>"},{"location":"Aperture%20API/reference/config/","title":"\u2699\ufe0f Config &amp; Keybinds","text":"<p>Keybinds (suggested defaults): - Open Editor: <code>O</code> - Play/Pause Preview: <code>P</code> - Toggle Path Overlay: <code>Y</code></p> <p>Options: - Letterbox / Cinematic Bars - Show Path Lines - Editor Sensitivity - Handle Size</p> <p>Server operators can lock playback to specific selectors and disable client playback where needed.</p>"},{"location":"Aperture%20API/reference/faq/","title":"\u2753 FAQ &amp; Troubleshooting","text":"<p>The camera \u201cjumps\u201d at a keyframe. Use easing or add a short buffer segment. For Bezier, keep handles aligned with the desired tangent.</p> <p>Speed feels inconsistent between segments. Enable constant\u2011speed mode or add more keyframes to even out distances.</p> <p>Nothing happens when I run <code>/camera play</code>. Check permissions/targets, ensure the path exists, and verify no conflicting camera mods are active.</p> <p>Can I run this server\u2011side only? Playback requires client visuals; server\u2011only makes sense for export and path management. Ship the mod client\u2011side for editor/preview.</p>"},{"location":"Aperture%20API/reference/glossary/","title":"\ud83d\udcda Glossary","text":"<ul> <li>Keyframe \u2013 A timed point containing position/rotation (and optional FOV/easing)</li> <li>Interpolation \u2013 Method by which the curve is computed between keyframes</li> <li>Bezier Handle \u2013 Control point that shapes curve curvature at a keyframe</li> <li>Arc\u2011Length \u2013 The physical length along a curve used for constant\u2011speed playback</li> <li>Reparameterization \u2013 Converting from time\u2011domain to arc\u2011length to normalize speed</li> </ul>"},{"location":"Aperture%20API/user/commands/","title":"\u2328\ufe0f Commands","text":"<p>The command surface is intentionally small and focused.</p>"},{"location":"Aperture%20API/user/commands/#aperture","title":"<code>/aperture</code>","text":"<ul> <li><code>help</code> \u2013 show help</li> <li><code>version</code> \u2013 print API version</li> <li><code>api</code> \u2013 developer info</li> </ul>"},{"location":"Aperture%20API/user/commands/#camera","title":"<code>/camera</code>","text":"<ul> <li><code>list</code> \u2013 list available paths</li> <li><code>play &lt;path&gt; [speed] [loop] [auto-reset] [target]</code> \u2013 play a path for a player or selector</li> <li><code>stop [target]</code> \u2013 stop camera</li> <li><code>reset [target]</code> \u2013 reset player view</li> <li><code>interpolation</code> \u2013 set default interpolation for new segments</li> <li><code>export</code> \u2013 export the current/selected path to JSON</li> </ul>"},{"location":"Aperture%20API/user/commands/#examples","title":"Examples","text":"<pre><code>/camera list\n/camera play base_flythrough 1.0 false true @p\n/camera stop @a\n/camera reset @p\n</code></pre>"},{"location":"Aperture%20API/user/editor/","title":"\ud83d\udee0 Editor &amp; Gizmos","text":"<p>Open the in\u2011game editor via its keybind (see Config &amp; Keybinds). The editor shows a timeline and a world overlay with keyframes and Bezier handles.</p>"},{"location":"Aperture%20API/user/editor/#keyframes","title":"Keyframes","text":"<ul> <li>Add: click in the world or use the <code>+</code> in the timeline</li> <li>Move: drag in the overlay; ticks update in the timeline</li> <li>Delete: select a keyframe and press delete / context menu</li> </ul>"},{"location":"Aperture%20API/user/editor/#bezier-handles","title":"Bezier Handles","text":"<ul> <li>Each keyframe has up to two handles (in / out)</li> <li>Drag handles to tune curvature and ease</li> <li>The editor will auto\u2011switch the segment to Bezier when a handle is moved</li> </ul>"},{"location":"Aperture%20API/user/editor/#interpolation-per-segment","title":"Interpolation per Segment","text":"<p>Choose the interpolation for a segment: - Bezier \u2013 freeform curvature using handles - Catmull\u2011Rom \u2013 natural, smooth spline through points - Cosine / Linear / Step \u2013 alternative feels for cuts or holds</p>"},{"location":"Aperture%20API/user/editor/#preview-controls","title":"Preview Controls","text":"<ul> <li>Play / Pause: preview the camera</li> <li>Scrub: drag the time marker on the timeline</li> <li>Speed: preview at 0.5x, 1x, 2x</li> <li>Show Path: toggle path visualization</li> </ul>"},{"location":"Aperture%20API/user/editor/#tips","title":"Tips","text":"<ul> <li>Use short eased ramps to avoid hard starts/ends</li> <li>Toggle constant\u2011speed if distances between keyframes vary</li> <li>Keep handles roughly co\u2011planar for flatter arcs</li> </ul>"},{"location":"Aperture%20API/user/paths/","title":"\ud83e\udded Paths &amp; Interpolation","text":"<p>A path is a sequence of keyframes (tick, position, rotation, optional FOV) with an interpolation mode per segment.</p>"},{"location":"Aperture%20API/user/paths/#interpolation-modes","title":"Interpolation Modes","text":"<ul> <li>Bezier \u2013 shape the curve with handles; best for artistic moves</li> <li>Catmull\u2011Rom \u2013 passes through keyframes; great for natural motion</li> <li>Cosine \u2013 smooth step interpolation (S\u2011curve feel)</li> <li>Linear \u2013 straight lines between points</li> <li>Step \u2013 hard cuts &amp; holds</li> </ul>"},{"location":"Aperture%20API/user/paths/#easing","title":"Easing","text":"<p>Per\u2011keyframe easing helps avoid abrupt velocity changes. A typical approach is to specify <code>easeIn</code> and <code>easeOut</code> (0.0\u20131.0).</p>"},{"location":"Aperture%20API/user/paths/#constantspeed-playback","title":"Constant\u2011Speed Playback","text":"<p>Long segments will otherwise run faster than short ones at the same tick count. The engine can re\u2011parameterize by arc\u2011length to normalize speed visually.</p> <p>Tip: If the beginning looks \u201csnappy,\u201d add a lead\u2011in segment or increase ease\u2011out on the first keyframe.</p>"},{"location":"Embers%20Text%20API/","title":"\ud83d\udd25 Embers Text API","text":"<p>Embers Text API is a lightweight but powerful Forge 1.20.1 library for creating immersive, animated text overlays in Minecraft. It was designed as a replacement for Immersive Messages API, offering more features without extra Fabric/txnilib baggage.</p>"},{"location":"Embers%20Text%20API/#showcase-video","title":"\ud83c\udfa5 Showcase Video","text":""},{"location":"Embers%20Text%20API/#features","title":"\u2728 Features","text":"<ul> <li>Fluent Builder API for custom messages  </li> <li>Animated Effects: typewriter reveal, obfuscation, shaking  </li> <li>Styling: gradients, bold/italic, custom fonts  </li> <li>Backgrounds: simple, gradient, or pixel-art style  </li> <li>Anchoring &amp; Positioning: control exactly where text appears  </li> <li>Duration-based Messages: text shown for ticks or seconds  </li> <li>Command System: send messages with <code>/emberstextapi</code> </li> </ul>"},{"location":"Embers%20Text%20API/#use-cases","title":"\ud83d\udce6 Use Cases","text":"<ul> <li>Boss fight intros / phase transitions  </li> <li>Quest notifications  </li> <li>RPG-style cutscenes  </li> <li>Server announcements  </li> <li>Stylish death / victory messages  </li> </ul>"},{"location":"Embers%20Text%20API/command_refrence/","title":"\u2328\ufe0f Command Reference","text":"<p>Root command: <code>/emberstextapi</code></p>"},{"location":"Embers%20Text%20API/command_refrence/#demo","title":"Demo","text":"<p><pre><code>/emberstextapi test &lt;id&gt;\n</code></pre> Plays a built\u2011in demonstration message.</p>"},{"location":"Embers%20Text%20API/command_refrence/#send-basic","title":"Send (basic)","text":"<p><pre><code>/emberstextapi send &lt;player&gt; &lt;duration&gt; &lt;text&gt;\n</code></pre> Sends <code>&lt;text&gt;</code> to <code>&lt;player&gt;</code> for <code>&lt;duration&gt;</code> ticks.</p>"},{"location":"Embers%20Text%20API/command_refrence/#sendcustom-full-control-via-nbt","title":"SendCustom (full control via NBT)","text":"<pre><code>/emberstextapi sendcustom &lt;player&gt; &lt;nbt&gt; &lt;duration&gt; &lt;text&gt;\n</code></pre>"},{"location":"Embers%20Text%20API/command_refrence/#common-nbt-tags","title":"Common NBT Tags","text":"<pre><code>{\n  \"font\": \"modid:font_name\",\n  \"bold\": true, \"italic\": true, \"underlined\": false, \"strikethrough\": false, \"obfuscated\": false,\n  \"color\": \"#FFAA00\",\n  \"gradient\": [\"#FF0000\", \"#00FF00\"],\n  \"bgGradient\": {\"start\":\"#FF000080\",\"end\":\"#0000FF80\"},\n  \"borderGradient\": [\"#FF0000\",\"#00FF00\"],\n  \"bgColor\": \"#333333CC\", \"borderColor\": \"#FFFFFF\", \"bgAlpha\": 0.5,\n  \"background\": true,\n  \"textureBackground\": {\n    \"texture\": \"modid:textures/gui/panel.png\",\n    \"mode\": \"CROP\",\n    \"sizeX\": 120, \"sizeY\": 40,\n    \"paddingX\": 6, \"paddingY\": 4,\n    \"scaleX\": 0.5, \"scaleY\": 0.5\n  },\n  \"size\": 1.25,\n  \"typewriter\": 2.0, \"center\": true,\n  \"wrap\": 160,\n  \"obfuscate\": \"LEFT\", \"obfuscateSpeed\": 0.1,\n  \"anchor\": \"CENTER_CENTER\", \"align\": \"CENTER_CENTER\",\n  \"offsetX\": 10, \"offsetY\": -20,\n  \"shadow\": true,\n  \"shakeWave\": 1.5, \"charShakeRandom\": 0.8\n}\n</code></pre> <p>Tip: Use <code>wrap</code>, <code>textureBackgroundSize*</code>, and <code>textureBackgroundMode</code> to control how text and background relate (fixed panels vs stretching).</p>"},{"location":"Embers%20Text%20API/command_refrence/#nbt-equivalents-for-sendcustom-and-datadriven-use","title":"NBT equivalents (for <code>/sendcustom</code> and data\u2011driven use)","text":"<ul> <li><code>font</code> \u2014 resource location: <code>{font:\"modid:font_name\"}</code></li> <li><code>bold</code>, <code>italic</code>, <code>underlined</code>, <code>strikethrough</code>, <code>obfuscated</code> \u2014 style flags</li> <li><code>color</code> \u2014 hex or name: <code>{color:\"#FFAA00\"}</code></li> <li><code>gradient</code> \u2014 list or <code>{start,end}</code></li> <li><code>bgGradient</code>, <code>borderGradient</code> \u2014 gradient objects/lists for frame background</li> <li><code>bgColor</code>, <code>borderColor</code>, <code>bgAlpha</code> \u2014 solid frame colors + opacity</li> <li><code>textureBackground</code> \u2014 either a string (<code>\"modid:textures/gui/panel.png\"</code>) or an object with fields:   <code>texture</code>, <code>u</code>, <code>v</code>, <code>width</code>, <code>height</code>, atlas <code>textureWidth</code>, <code>textureHeight</code>,   per\u2011axis <code>paddingX</code>, <code>paddingY</code>, <code>scaleX</code>, <code>scaleY</code>, draw size <code>sizeX</code>, <code>sizeY</code> (aka <code>drawWidth</code>, <code>drawHeight</code>),   and <code>mode</code>/<code>resize</code> (Stretch/Crop/Tile).</li> <li><code>size</code> \u2014 uniform text scale</li> <li><code>typewriter</code> (float), optional <code>\"center\": true</code></li> <li><code>background</code> \u2014 boolean</li> <li><code>wrap</code> \u2014 pixel width</li> <li><code>obfuscate</code>, <code>obfuscateSpeed</code> \u2014 mode (+ optional speed)</li> <li><code>anchor</code>, <code>align</code> \u2014 enum names as strings</li> <li><code>offsetX</code>, <code>offsetY</code> \u2014 pixels</li> <li><code>shadow</code> \u2014 boolean</li> <li>Shakes: <code>shakeWave</code>, <code>shakeCircle</code>, <code>shakeRandom</code>, <code>charShakeWave</code>, <code>charShakeCircle</code>, <code>charShakeRandom</code></li> </ul> <p>Deprecated tag names still function but will log warnings.</p>"},{"location":"Embers%20Text%20API/dev_integration/","title":"\ud83d\udee0 Developer Integration","text":""},{"location":"Embers%20Text%20API/dev_integration/#server-client-flow","title":"Server \u2192 Client flow","text":"<p>You build an <code>ImmersiveMessage</code> server-side and pass it to <code>EmbersTextAPI.sendMessage(ServerPlayer, ImmersiveMessage)</code>. The API packs it and ships it to the client over a <code>SimpleChannel</code> where it renders.</p> <pre><code>void announce(ServerPlayer player, String text) {\n    var msg = ImmersiveMessage.builder(120f, text)\n        .anchor(TextAnchor.TOP_CENTER)\n        .offset(0f, 6f)\n        .gradient(0xFFA000, 0xFFDD55)\n        .background(true)\n        .typewriter(1.5f, true)\n        .shake(ShakeType.CIRCLE, 0.8f);\n    EmbersTextAPI.sendMessage(player, msg);\n}\n</code></pre>"},{"location":"Embers%20Text%20API/dev_integration/#positioning-layout","title":"Positioning &amp; layout","text":"<ul> <li><code>anchor(TextAnchor)</code> sets where on the screen the message is anchored (e.g., <code>TOP_LEFT</code>, <code>CENTER_CENTER</code>).</li> <li><code>align(TextAnchor)</code> sets text alignment relative to that anchor.</li> <li><code>offset(float x, float y)</code> nudges from the anchor in pixels.</li> <li><code>scale(float size)</code> or <code>size</code> (NBT) scales the text.</li> <li><code>wrap(int width)</code> wraps long text to a pixel width.</li> </ul>"},{"location":"Embers%20Text%20API/dev_integration/#color-style","title":"Color &amp; style","text":"<ul> <li><code>color(int/String/ChatFormatting)</code> \u2014 single color by RGB, hex string, or vanilla color.</li> <li><code>gradient(int... or String...)</code> \u2014 any number of gradient stops.</li> <li>Vanilla flags are supported via NBT (<code>bold</code>, <code>italic</code>, <code>underlined</code>, <code>strikethrough</code>, <code>obfuscated</code>).</li> </ul>"},{"location":"Embers%20Text%20API/dev_integration/#backgrounds","title":"Backgrounds","text":"<p>Two approaches: 1) Frame background (tooltip-style): <code>background(true)</code> and optionally <code>bgColor</code>, <code>bgGradient</code>, <code>borderColor</code>, <code>borderGradient</code>, <code>bgAlpha</code>. 2) Textured background quad: <code>textureBackground(...)</code> + controls    like <code>textureBackgroundScale(...)</code>, <code>textureBackgroundPadding(...)</code>,    <code>textureBackgroundSize/Width/Height(...)</code>, and <code>textureBackgroundMode(...)</code>    for stretch vs crop vs tile behavior.</p>"},{"location":"Embers%20Text%20API/dev_integration/#animation","title":"Animation","text":"<ul> <li><code>typewriter(float speed [, boolean centerWhileRevealing])</code></li> <li>Whole\u2011text shakes: <code>shake(ShakeType, float)</code> where <code>ShakeType</code> supports <code>WAVE</code>, <code>CIRCLE</code>, <code>RANDOM</code>.</li> <li>Per\u2011character shakes: <code>charShake...</code> variants or NBT (<code>charShakeWave</code>, <code>charShakeCircle</code>, <code>charShakeRandom</code>).</li> <li>Obfuscation reveal: <code>obfuscate</code> mode (<code>LEFT</code>, <code>RIGHT</code>, <code>CENTER</code>, <code>RANDOM</code>) with optional <code>obfuscateSpeed</code> (NBT).</li> </ul>"},{"location":"Embers%20Text%20API/dev_integration/#fonts","title":"Fonts","text":"<ul> <li>Put your font assets at <code>assets/emberstextapi/font/</code> (JSON + font file).</li> <li>Reference them from text styles or NBT: <code>{font:\"modid:font_name\"}</code>.</li> </ul>"},{"location":"Embers%20Text%20API/examples/","title":"\ud83d\udca1 Examples","text":""},{"location":"Embers%20Text%20API/examples/#1-boss-intro-centered-typewriter-with-wave-shake","title":"1) Boss Intro (centered typewriter with wave shake)","text":"<pre><code>var msg = ImmersiveMessage.builder(200f, \"\ud83d\udd25 IGNIS, INFERNO KNIGHT \ud83d\udd25\")\n    .anchor(TextAnchor.CENTER_CENTER)\n    .gradient(0xFF2A00, 0xFFA500)\n    .background(true)\n    .typewriter(2.0f, true)\n    .shake(ShakeType.WAVE, 1.0f);\nserver.getPlayerList().getPlayers().forEach(p -&gt; EmbersTextAPI.sendMessage(p, msg));\n</code></pre>"},{"location":"Embers%20Text%20API/examples/#2-fixedsize-textured-panel-dont-stretch-crop-to-31","title":"2) Fixed\u2011size textured panel (don\u2019t stretch, crop to 3:1)","text":"<pre><code>/emberstextapi sendcustom @a {\n  textureBackground:{texture:\"mymod:textures/gui/boss_panel.png\",mode:\"CROP\",sizeX:180,sizeY:60,paddingX:8,paddingY:6},\n  wrap:160, anchor:\"TOP_CENTER\", offsetY:10, background:false, \n  gradient:[\"#FF3A00\",\"#FFC800\"], typewriter:1.5, center:true\n} 140 \"SCYLLA AWAKENS\"\n</code></pre>"},{"location":"Embers%20Text%20API/examples/#3-minimal-singlecolor-message-at-top","title":"3) Minimal single\u2011color message at top","text":"<pre><code>var msg = ImmersiveMessage.builder(80f, \"Server restarting soon\u2026\")\n    .anchor(TextAnchor.TOP_CENTER)\n    .color(0xFFFF55)\n    .background(true);\nEmbersTextAPI.sendMessage(player, msg);\n</code></pre>"},{"location":"Embers%20Text%20API/examples/#4-percharacter-random-jitter-obfuscation-reveal","title":"4) Per\u2011character random jitter + obfuscation reveal","text":"<pre><code>/emberstextapi sendcustom @p {\n  obfuscate:\"RANDOM\", obfuscateSpeed:0.08, charShakeRandom:0.7,\n  gradient:[\"#A0A0A0\",\"#FFFFFF\"], anchor:\"BOTTOM_CENTER\", offsetY:-30\n} 120 \"Decrypting Access Key\u2026\"\n</code></pre>"},{"location":"Embers%20Text%20API/meathods_refrence/","title":"\ud83d\udcda Methods Reference","text":"<p>Below are the common builder methods and what they do.</p> Method Purpose Notes <code>anchor(TextAnchor)</code> Screen anchor e.g., <code>TOP_LEFT</code>, <code>CENTER_CENTER</code> <code>align(TextAnchor)</code> Text alignment Same enum as <code>anchor</code> <code>offset(float x, float y)</code> Nudge from anchor Pixels <code>scale(float size)</code> Uniform text scale Same as NBT <code>size</code> <code>color(int / String / ChatFormatting)</code> Single color RGB (0xRRGGBB) or hex string <code>gradient(int... or String...)</code> Multi\u2011stop gradient Accepts any number of stops <code>background(boolean)</code> Enable/disable frame background Use with <code>bgColor</code>, <code>bgGradient</code>, <code>borderColor</code>, <code>borderGradient</code>, <code>bgAlpha</code> (via NBT) <code>textureBackground(...)</code> Textured quad behind text See NBT fields below <code>textureBackgroundScale(float sx, float sy)</code> UV sampling scale Controls stretch/tile density <code>textureBackgroundPadding(float px, float py)</code> Extra empty space Around the textured quad <code>textureBackgroundSize/Width/Height(...)</code> Override draw size Separate from text bounds <code>textureBackgroundMode(...)</code> How to fit the texture Stretch / Crop / Tile <code>borderGradient(int start, int end)</code> Gradient border Frame background only <code>wrap(int width)</code> Word wrapping Width in pixels <code>typewriter(float speed [, boolean keepCentered])</code> Typewriter animation Speed = chars per tick <code>shake(ShakeType type, float amplitude)</code> Whole\u2011message shake <code>WAVE</code>, <code>CIRCLE</code>, <code>RANDOM</code> <code>charShake...(...)</code> Per\u2011character shakes Wave/Circle/Random variants"},{"location":"Embers%20Text%20API/meathods_refrence/#enums-and-flags","title":"Enums and flags","text":"<ul> <li><code>TextAnchor</code>: <code>TOP_LEFT</code>, <code>TOP_CENTER</code>, <code>TOP_RIGHT</code>, <code>CENTER_LEFT</code>, <code>CENTER_CENTER</code>, <code>CENTER_RIGHT</code>, <code>BOTTOM_LEFT</code>, <code>BOTTOM_CENTER</code>, <code>BOTTOM_RIGHT</code></li> <li><code>ShakeType</code>: <code>WAVE</code>, <code>CIRCLE</code>, <code>RANDOM</code></li> <li>Obfuscation modes (NBT): <code>LEFT</code>, <code>RIGHT</code>, <code>CENTER</code>, <code>RANDOM</code></li> </ul>"},{"location":"Embers%20Text%20API/meathods_refrence/#nbt-equivalents-for-sendcustom-and-datadriven-use","title":"NBT equivalents (for <code>/sendcustom</code> and data\u2011driven use)","text":"<ul> <li><code>font</code> \u2014 resource location: <code>{font:\"modid:font_name\"}</code></li> <li><code>bold</code>, <code>italic</code>, <code>underlined</code>, <code>strikethrough</code>, <code>obfuscated</code> \u2014 style flags</li> <li><code>color</code> \u2014 hex or name: <code>{color:\"#FFAA00\"}</code></li> <li><code>gradient</code> \u2014 list or <code>{start,end}</code></li> <li><code>bgGradient</code>, <code>borderGradient</code> \u2014 gradient objects/lists for frame background</li> <li><code>bgColor</code>, <code>borderColor</code>, <code>bgAlpha</code> \u2014 solid frame colors + opacity</li> <li><code>textureBackground</code> \u2014 either a string (<code>\"modid:textures/gui/panel.png\"</code>) or an object with fields:   <code>texture</code>, <code>u</code>, <code>v</code>, <code>width</code>, <code>height</code>, atlas <code>textureWidth</code>, <code>textureHeight</code>,   per\u2011axis <code>paddingX</code>, <code>paddingY</code>, <code>scaleX</code>, <code>scaleY</code>, draw size <code>sizeX</code>, <code>sizeY</code> (aka <code>drawWidth</code>, <code>drawHeight</code>),   and <code>mode</code>/<code>resize</code> (Stretch/Crop/Tile).</li> <li><code>size</code> \u2014 uniform text scale</li> <li><code>typewriter</code> (float), optional <code>\"center\": true</code></li> <li><code>background</code> \u2014 boolean</li> <li><code>wrap</code> \u2014 pixel width</li> <li><code>obfuscate</code>, <code>obfuscateSpeed</code> \u2014 mode (+ optional speed)</li> <li><code>anchor</code>, <code>align</code> \u2014 enum names as strings</li> <li><code>offsetX</code>, <code>offsetY</code> \u2014 pixels</li> <li><code>shadow</code> \u2014 boolean</li> <li>Shakes: <code>shakeWave</code>, <code>shakeCircle</code>, <code>shakeRandom</code>, <code>charShakeWave</code>, <code>charShakeCircle</code>, <code>charShakeRandom</code></li> </ul> <p>Deprecated tag names still function but will log warnings.</p>"}]}